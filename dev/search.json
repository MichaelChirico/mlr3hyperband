[{"path":"https://mlr3hyperband.mlr-org.com/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Author, maintainer. Sebastian Gruber. Author. Jakob Richter. Author. Julia Moosbauer. Author. Bernd Bischl. Author.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M, Gruber S, Richter J, Moosbauer J, Bischl B (2021). mlr3hyperband: Successive Halving Hyperband Algorithms 'mlr3'. https://mlr3hyperband.mlr-org.com, https://github.com/mlr-org/mlr3hyperband.","code":"@Manual{,   title = {mlr3hyperband: Successive Halving and Hyperband Algorithms for 'mlr3'},   author = {Marc Becker and Sebastian Gruber and Jakob Richter and Julia Moosbauer and Bernd Bischl},   year = {2021},   note = {https://mlr3hyperband.mlr-org.com, https://github.com/mlr-org/mlr3hyperband}, }"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"mlr3hyperband","dir":"","previous_headings":"","what":"Successive Halving and Hyperband Algorithms for mlr3","title":"Successive Halving and Hyperband Algorithms for mlr3","text":"Package website: release | dev mlr3hyperband extends mlr3tuning package various multifidelity optimization methods based successive halving algorithm. currently provides following optimizers bbotk tuner mlr3tuning: Successive Halving (OptimizerSuccessiveHalving & TunerSuccessiveHalving) Asynchronous Successive Halving (OptimizerAsha & TunerAsha) Hyperband (OptimizerSuccessiveHalving & TunerSuccessiveHalving) Asynchronous Hyperband (OptimizerAhb & TunerAhb)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Successive Halving and Hyperband Algorithms for mlr3","text":"mlr3book chapter hyperband hyperparameter tuning. original publications introducing successive halving, hyperband asha algorithm. Ask questions Stackoverflow (tag #mlr3)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Successive Halving and Hyperband Algorithms for mlr3","text":"Install last release CRAN: Install development version GitHub:","code":"install.packages(\"mlr3hyperband\") remotes::install_github(\"mlr-org/mlr3hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Successive Halving and Hyperband Algorithms for mlr3","text":"","code":"library(mlr3hyperband) library(mlr3learners)  # load learner and define search space learner = lrn(\"classif.xgboost\",   nrounds = to_tune(p_int(lower = 1, upper = 16, tags = \"budget\")),   eta = to_tune(0, 1),   booster = to_tune() )  # set parallel backend future::plan(\"multisession\")  # hyperparameter tuning on the pima indians diabetes data set instance = tune(   method = \"asha\",   task = tsk(\"pima\"),   learner = learner,   resampling = rsmp(\"cv\", folds = 3),   measures = msr(\"classif.ce\"),   term_evals = 100 )"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Budget — hyperband_budget","title":"Hyperband Budget — hyperband_budget","text":"Calculates total budget used OptimizerHyperband.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Budget — hyperband_budget","text":"","code":"hyperband_budget(r_min, r_max, eta, integer_budget = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Budget — hyperband_budget","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. integer_budget (logical(1)) TRUE, budget parameter rounded integer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_budget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Budget — hyperband_budget","text":"integer(1)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Configs — hyperband_n_configs","title":"Hyperband Configs — hyperband_n_configs","text":"Calculates many different configurations sampled OptimizerHyperband.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Configs — hyperband_n_configs","text":"","code":"hyperband_n_configs(r_min, r_max, eta)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Configs — hyperband_n_configs","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_n_configs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Configs — hyperband_n_configs","text":"integer(1)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperband Schedule — hyperband_schedule","title":"Hyperband Schedule — hyperband_schedule","text":"Returns schedule OptimizerHyperband.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperband Schedule — hyperband_schedule","text":"","code":"hyperband_schedule(r_min, r_max, eta, integer_budget = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperband Schedule — hyperband_schedule","text":"r_min (numeric(1)) Lower bound budget parameter. r_max (numeric(1)) Upper bound budget parameter. eta (numeric(1)) Fraction parameter successive halving algorithm: every stage configuration budget increased factor eta best 1/eta points used next stage. Non-integer values supported, eta allowed less equal 1. integer_budget (logical(1)) TRUE, budget parameter rounded integer.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/hyperband_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hyperband Schedule — hyperband_schedule","text":"data.table::data.table()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr3hyperband-package.html","id":null,"dir":"Reference","previous_headings":"","what":"mlr3hyperband: Successive Halving and Hyperband Algorithms for 'mlr3' — mlr3hyperband-package","title":"mlr3hyperband: Successive Halving and Hyperband Algorithms for 'mlr3' — mlr3hyperband-package","text":"Multifidelity optimization methods based successive halving algorithm. Implements successive halving, asynchronous successive halving, hyperband asynchronous hyperband algorithm general purpose optimizers 'bbotk' tuners `mlr3tuning`. Various termination criteria can set combined. possible learners hotstarted accelerate tuning. class 'AutoTuner' provides convenient way perform nested resampling combination 'mlr3'.","code":""},{"path":[]},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr3hyperband-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mlr3hyperband: Successive Halving and Hyperband Algorithms for 'mlr3' — mlr3hyperband-package","text":"Maintainer: Marc Becker marcbecker@posteo.de (ORCID) Authors: Sebastian Gruber gruber_sebastian@t-online.de (ORCID) Jakob Richter jakob1richter@gmail.com (ORCID) Julia Moosbauer ju.moosbauer@googlemail.com (ORCID) Bernd Bischl bernd_bischl@gmx.net (ORCID)","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"OptimizerAhb class implements asynchronous hyperband algorithm (AHB). AHB repeatedly runs ASHA (OptimizerAsha) different minimum budgets base stage. run ASHA within AHB called bracket. AHB considers s_max + 1 brackets s_max = floor(log(r_max / r_min, eta). explorative bracket s = s_max constructs s_max + 1 stages allocates minimum budget (r_min) base stage.  minimum budget (r_min) increased bracket factor eta maximum budget allocated base stage. bracket s = 0 random search full budget. ASHA run uses 1 / s_max + 1 bbotk::Terminator. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage explorative bracket, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"Li L, Jamieson K, Rostamizadeh , Gonina E, Ben-tzur J, Hardt M, Recht B, Talwalkar (2020). “System Massively Parallel Hyperparameter Tuning.” Proceedings Machine Learning Systems, 2, 230-246. https://proceedings.mlsys.org/paper/2020/hash/f4b9ec30ad9f68f89b29639786cb62ef-Abstract.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta points promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn base stage bracket. default uniform sampling.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"bbotk::Archive holds following additional columns specific hyperband algorithm: stage (integer(1)) stages bracket. Starts counting 0. bracket (integer(1)) bracket index. Counts 0.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"mlr3hyperband supports custom paradox::Sampler draw candidates base stage.","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":" $optimize() method supports progress bars via package progressr. Simply wrap method call progressr::with_progress() enable . Alternatively, call progressr::handlers() global = TRUE enable progress bars globally. recommend progress package backend can enabled progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"points asynchronously evaluated future package. select parallel backend, use future::plan().","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"mlr3hyperband uses lgr package logging. lgr supports multiple log levels can queried getOption(\"lgr.log_levels\"). Use lgr::get_logger(\"bbotk\") access control logger. suppress output reduce verbosity, can lower log default level \"info\" \"warn\": log file data base, see documentation lgr::lgr-package.","code":"lgr::get_logger(\"bbotk\")$set_threshold(\"warn\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"bbotk::Optimizer -> OptimizerAhb","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"bbotk::Optimizer$format() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"OptimizerAhb$new() OptimizerAhb$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"","code":"OptimizerAhb$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"","code":"OptimizerAhb$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_ahb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizer Asynchronous Hyperband — mlr_optimizers_ahb","text":"","code":"library(bbotk) library(data.table)  # set search space search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # objective with modified branin function, see `bbotk::branin()` objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # initialize instance and optimizer instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 50) )  optimizer = opt(\"ahb\")  # optimize branin function optimizer$optimize(instance) #>          x1         x2 fidelity  x_domain        y #> 1: 3.875469 0.04240107     0.01 <list[3]> 2.928651  # best scoring evaluation instance$result #>          x1         x2 fidelity  x_domain        y #> 1: 3.875469 0.04240107     0.01 <list[3]> 2.928651  # all evaluations as.data.table(instance$archive) #>             x1          x2 fidelity asha_id stage bracket           timestamp #>  1:  5.7181430  9.85095801     0.01       1     0       6 2021-12-18 15:36:06 #>  2:  9.0556827  5.45778435     0.01       2     0       6 2021-12-18 15:36:06 #>  3:  9.0556827  5.45778435     0.02       2     1       6 2021-12-18 15:36:06 #>  4:  6.8454122 11.53101864     0.01       3     0       6 2021-12-18 15:36:06 #>  5:  3.8754692  0.04240107     0.01       4     0       6 2021-12-18 15:36:06 #>  6:  3.8754692  0.04240107     0.02       4     1       6 2021-12-18 15:36:06 #>  7:  3.8754692  0.04240107     0.04       4     2       6 2021-12-18 15:36:06 #>  8:  9.0017025  4.27160250     0.01       5     0       6 2021-12-18 15:36:06 #>  9:  4.7002390  1.22196727     0.02       6     0       5 2021-12-18 15:36:06 #> 10:  3.7288299  6.47402677     0.02       7     0       5 2021-12-18 15:36:06 #> 11:  4.7002390  1.22196727     0.04       6     1       5 2021-12-18 15:36:06 #> 12: -4.8800778 11.48983483     0.02       8     0       5 2021-12-18 15:36:06 #> 13: -1.6287128  1.10290866     0.02       9     0       5 2021-12-18 15:36:06 #> 14: -4.8800778 11.48983483     0.04       8     1       5 2021-12-18 15:36:06 #> 15:  4.7002390  1.22196727     0.08       6     2       5 2021-12-18 15:36:06 #> 16:  8.9329917 11.27497355     0.04      10     0       4 2021-12-18 15:36:06 #> 17: -3.7805743  7.51985783     0.04      11     0       4 2021-12-18 15:36:06 #> 18: -3.7805743  7.51985783     0.08      11     1       4 2021-12-18 15:36:06 #> 19: -1.5313429 12.45554632     0.04      12     0       4 2021-12-18 15:36:06 #> 20: -1.5313429 12.45554632     0.08      12     1       4 2021-12-18 15:36:07 #> 21: -1.5313429 12.45554632     0.16      12     2       4 2021-12-18 15:36:07 #> 22: -1.3027266  3.40314670     0.04      13     0       4 2021-12-18 15:36:07 #> 23: -1.9091629  7.32222417     0.08      14     0       3 2021-12-18 15:36:07 #> 24:  5.6412191  1.38611179     0.08      15     0       3 2021-12-18 15:36:07 #> 25: -1.9091629  7.32222417     0.16      14     1       3 2021-12-18 15:36:07 #> 26: -1.4832958  2.33597855     0.08      16     0       3 2021-12-18 15:36:07 #> 27: -0.8897767  9.45096344     0.08      17     0       3 2021-12-18 15:36:07 #> 28: -0.8897767  9.45096344     0.16      17     1       3 2021-12-18 15:36:07 #> 29: -1.9091629  7.32222417     0.32      14     2       3 2021-12-18 15:36:07 #> 30:  5.2399719  0.46894455     0.16      18     0       2 2021-12-18 15:36:07 #> 31:  6.3636039  9.06811942     0.16      19     0       2 2021-12-18 15:36:07 #> 32:  5.2399719  0.46894455     0.32      18     1       2 2021-12-18 15:36:07 #> 33:  2.5153032  5.39593888     0.16      20     0       2 2021-12-18 15:36:07 #> 34:  2.5153032  5.39593888     0.32      20     1       2 2021-12-18 15:36:07 #> 35:  2.5153032  5.39593888     0.64      20     2       2 2021-12-18 15:36:07 #> 36: -4.6235964 11.85394574     0.16      21     0       2 2021-12-18 15:36:07 #> 37:  0.9005048 13.09374998     0.32      22     0       1 2021-12-18 15:36:07 #> 38:  2.2656542  9.74410909     0.32      23     0       1 2021-12-18 15:36:07 #> 39:  2.2656542  9.74410909     0.64      23     1       1 2021-12-18 15:36:07 #> 40: -1.4898081  2.31664904     0.32      24     0       1 2021-12-18 15:36:07 #> 41: -1.4898081  2.31664904     0.64      24     1       1 2021-12-18 15:36:07 #> 42:  6.9476976  1.26173623     0.32      25     0       1 2021-12-18 15:36:07 #> 43:  6.9476976  1.26173623     0.64      25     1       1 2021-12-18 15:36:07 #> 44:  1.4564808 10.01508528     0.64      26     0       0 2021-12-18 15:36:07 #> 45:  5.0023477  1.48897456     0.64      27     0       0 2021-12-18 15:36:07 #> 46:  9.4826524 12.75209814     0.64      28     0       0 2021-12-18 15:36:08 #> 47:  4.6279431  0.75899213     0.64      29     0       0 2021-12-18 15:36:08 #> 48:  6.4636678  9.93704136     0.64      30     0       0 2021-12-18 15:36:08 #> 49: -2.0219709  9.78315514     0.64      31     0       0 2021-12-18 15:36:08 #> 50:  2.6492795 14.90653346     0.64      32     0       0 2021-12-18 15:36:08 #> 51:  3.6812783 14.90545722     0.64      33     0       0 2021-12-18 15:36:08 #>             x1          x2 fidelity asha_id stage bracket           timestamp #>     batch_nr    status          y x_domain_x1 x_domain_x2 x_domain_fidelity #>  1:        1 evaluated 161.264084   5.7181430  9.85095801              0.01 #>  2:        2 evaluated 130.891909   9.0556827  5.45778435              0.01 #>  3:        3 evaluated 129.029722   9.0556827  5.45778435              0.02 #>  4:        4 evaluated 243.466023   6.8454122 11.53101864              0.01 #>  5:        5 evaluated   2.928651   3.8754692  0.04240107              0.01 #>  6:        6 evaluated   2.936175   3.8754692  0.04240107              0.02 #>  7:        7 evaluated   2.952575   3.8754692  0.04240107              0.04 #>  8:        8 evaluated 104.315455   9.0017025  4.27160250              0.01 #>  9:        9 evaluated  13.938301   4.7002390  1.22196727              0.02 #> 10:       10 evaluated  37.707697   3.7288299  6.47402677              0.02 #> 11:       11 evaluated  13.762305   4.7002390  1.22196727              0.04 #> 12:       12 evaluated  20.721305  -4.8800778 11.48983483              0.02 #> 13:       13 evaluated  66.779246  -1.6287128  1.10290866              0.02 #> 14:       14 evaluated  21.011234  -4.8800778 11.48983483              0.04 #> 15:       15 evaluated  13.422027   4.7002390  1.22196727              0.08 #> 16:       16 evaluated 285.262988   8.9329917 11.27497355              0.04 #> 17:       17 evaluated  27.007276  -3.7805743  7.51985783              0.04 #> 18:       18 evaluated  27.578985  -3.7805743  7.51985783              0.08 #> 19:       19 evaluated  25.906438  -1.5313429 12.45554632              0.04 #> 20:       20 evaluated  25.832601  -1.5313429 12.45554632              0.08 #> 21:       21 evaluated  25.685456  -1.5313429 12.45554632              0.16 #> 22:       22 evaluated  34.883350  -1.3027266  3.40314670              0.04 #> 23:       23 evaluated  10.241910  -1.9091629  7.32222417              0.08 #> 24:       24 evaluated  27.809636   5.6412191  1.38611179              0.08 #> 25:       25 evaluated  10.350756  -1.9091629  7.32222417              0.16 #> 26:       26 evaluated  48.129342  -1.4832958  2.33597855              0.08 #> 27:       27 evaluated  20.066983  -0.8897767  9.45096344              0.08 #> 28:       28 evaluated  20.041620  -0.8897767  9.45096344              0.16 #> 29:       29 evaluated  10.573551  -1.9091629  7.32222417              0.32 #> 30:       30 evaluated  17.292691   5.2399719  0.46894455              0.16 #> 31:       31 evaluated 148.764819   6.3636039  9.06811942              0.16 #> 32:       32 evaluated  16.108015   5.2399719  0.46894455              0.32 #> 33:       33 evaluated  11.912911   2.5153032  5.39593888              0.16 #> 34:       34 evaluated  11.292852   2.5153032  5.39593888              0.32 #> 35:       35 evaluated  10.114218   2.5153032  5.39593888              0.64 #> 36:       36 evaluated  15.252758  -4.6235964 11.85394574              0.16 #> 37:       37 evaluated  87.830142   0.9005048 13.09374998              0.32 #> 38:       38 evaluated  53.356420   2.2656542  9.74410909              0.32 #> 39:       39 evaluated  51.071927   2.2656542  9.74410909              0.64 #> 40:       40 evaluated  49.096064  -1.4898081  2.31664904              0.32 #> 41:       41 evaluated  49.980433  -1.4898081  2.31664904              0.64 #> 42:       42 evaluated  28.888460   6.9476976  1.26173623              0.32 #> 43:       43 evaluated  20.876004   6.9476976  1.26173623              0.64 #> 44:       44 evaluated  48.739283   1.4564808 10.01508528              0.64 #> 45:       45 evaluated  13.996760   5.0023477  1.48897456              0.64 #> 46:       46 evaluated 181.719979   9.4826524 12.75209814              0.64 #> 47:       47 evaluated   9.206689   4.6279431  0.75899213              0.64 #> 48:       48 evaluated 126.178445   6.4636678  9.93704136              0.64 #> 49:       49 evaluated   5.847158  -2.0219709  9.78315514              0.64 #> 50:       50 evaluated 157.013187   2.6492795 14.90653346              0.64 #> 51:       51  proposed         NA          NA          NA                NA #>     batch_nr    status          y x_domain_x1 x_domain_x2 x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"OptimizerAsha class implements asynchronous successive halving algorithm (ASHA). ASHA parallelizes SHA (OptimizerSuccessiveHalving) promoting candidates next stage soon possible instead waiting candidates stage finish. ASHA starts sampling candidate point available worker. evaluation finishes worker available , ASHA checks stages top bottom promotable candidates. Promotions possible evaluated candidates belong top 1 / eta stage. promotions possible, new candidate sampled added base stage, increases number possible promotions stages. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stage.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"Li L, Jamieson K, Rostamizadeh , Gonina E, Ben-tzur J, Hardt M, Recht B, Talwalkar (2020). “System Massively Parallel Hyperparameter Tuning.” Proceedings Machine Learning Systems, 2, 230-246. https://proceedings.mlsys.org/paper/2020/hash/f4b9ec30ad9f68f89b29639786cb62ef-Abstract.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"eta numeric(1) every stage, budget increased factor eta best 1/eta points promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"bbotk::Archive holds following additional column specific successive halving algorithm: stage (integer(1)) Stage index. Starts counting 0.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"mlr3hyperband supports custom paradox::Sampler draw candidates base stage.","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":" $optimize() method supports progress bars via package progressr. Simply wrap method call progressr::with_progress() enable . Alternatively, call progressr::handlers() global = TRUE enable progress bars globally. recommend progress package backend can enabled progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"points asynchronously evaluated future package. select parallel backend, use future::plan().","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"mlr3hyperband uses lgr package logging. lgr supports multiple log levels can queried getOption(\"lgr.log_levels\"). Use lgr::get_logger(\"bbotk\") access control logger. suppress output reduce verbosity, can lower log default level \"info\" \"warn\": log file data base, see documentation lgr::lgr-package.","code":"lgr::get_logger(\"bbotk\")$set_threshold(\"warn\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"bbotk::Optimizer -> OptimizerAsha","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"bbotk::Optimizer$format() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"OptimizerAsha$new() OptimizerAsha$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"","code":"OptimizerAsha$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"","code":"OptimizerAsha$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_asha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizer Asynchronous Successive Halving — mlr_optimizers_asha","text":"","code":"library(bbotk) library(data.table)  # set search space search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # objective with modified branin function, see `bbotk::branin()` objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # initialize instance and optimizer instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 50) )  optimizer = opt(\"asha\")  # optimize branin function optimizer$optimize(instance) #>          x1       x2 fidelity  x_domain        y #> 1: 2.787338 3.534103     0.64 <list[3]> 2.547429  # best scoring evaluation instance$result #>          x1       x2 fidelity  x_domain        y #> 1: 2.787338 3.534103     0.64 <list[3]> 2.547429  # all evaluations as.data.table(instance$archive) #>             x1         x2 fidelity asha_id stage           timestamp batch_nr #>  1:  6.5881723 14.9833518     0.01       1     0 2021-12-18 15:36:09        1 #>  2: -0.1385951 13.0583587     0.01       2     0 2021-12-18 15:36:09        2 #>  3: -0.1385951 13.0583587     0.02       2     1 2021-12-18 15:36:09        3 #>  4:  8.0379920  1.0794223     0.01       3     0 2021-12-18 15:36:09        4 #>  5:  8.0379920  1.0794223     0.02       3     1 2021-12-18 15:36:09        5 #>  6:  8.0379920  1.0794223     0.04       3     2 2021-12-18 15:36:09        6 #>  7: -2.0381866 10.7968492     0.01       4     0 2021-12-18 15:36:09        7 #>  8: -2.0381866 10.7968492     0.02       4     1 2021-12-18 15:36:09        8 #>  9: -2.0381866 10.7968492     0.04       4     2 2021-12-18 15:36:09        9 #> 10: -2.0381866 10.7968492     0.08       4     3 2021-12-18 15:36:09       10 #> 11:  3.7297025  2.5736275     0.01       5     0 2021-12-18 15:36:09       11 #> 12:  3.7297025  2.5736275     0.02       5     1 2021-12-18 15:36:09       12 #> 13:  3.7297025  2.5736275     0.04       5     2 2021-12-18 15:36:09       13 #> 14:  3.7297025  2.5736275     0.08       5     3 2021-12-18 15:36:09       14 #> 15:  3.7297025  2.5736275     0.16       5     4 2021-12-18 15:36:10       15 #> 16: -3.9958461 14.9329922     0.01       6     0 2021-12-18 15:36:10       16 #> 17: -3.9958461 14.9329922     0.02       6     1 2021-12-18 15:36:10       17 #> 18:  2.8436635  4.1097451     0.01       7     0 2021-12-18 15:36:10       18 #> 19:  2.8436635  4.1097451     0.02       7     1 2021-12-18 15:36:10       19 #> 20:  2.8436635  4.1097451     0.04       7     2 2021-12-18 15:36:10       20 #> 21:  2.8436635  4.1097451     0.08       7     3 2021-12-18 15:36:10       21 #> 22:  5.0384610  5.4105540     0.01       8     0 2021-12-18 15:36:10       22 #> 23: -4.3858724 13.1586824     0.01       9     0 2021-12-18 15:36:10       23 #> 24: -4.3858724 13.1586824     0.02       9     1 2021-12-18 15:36:10       24 #> 25: -4.3858724 13.1586824     0.04       9     2 2021-12-18 15:36:10       25 #> 26:  2.7873379  3.5341029     0.01      10     0 2021-12-18 15:36:10       26 #> 27:  2.7873379  3.5341029     0.02      10     1 2021-12-18 15:36:10       27 #> 28:  2.7873379  3.5341029     0.04      10     2 2021-12-18 15:36:10       28 #> 29:  2.7873379  3.5341029     0.08      10     3 2021-12-18 15:36:10       29 #> 30:  2.7873379  3.5341029     0.16      10     4 2021-12-18 15:36:10       30 #> 31:  2.7873379  3.5341029     0.32      10     5 2021-12-18 15:36:10       31 #> 32: -2.3125947  9.8593007     0.01      11     0 2021-12-18 15:36:10       32 #> 33: -2.3125947  9.8593007     0.02      11     1 2021-12-18 15:36:10       33 #> 34: -2.3125947  9.8593007     0.04      11     2 2021-12-18 15:36:10       34 #> 35: -2.3125947  9.8593007     0.08      11     3 2021-12-18 15:36:10       35 #> 36: -2.3125947  9.8593007     0.16      11     4 2021-12-18 15:36:10       36 #> 37: -2.3125947  9.8593007     0.32      11     5 2021-12-18 15:36:10       37 #> 38:  2.7873379  3.5341029     0.64      10     6 2021-12-18 15:36:10       38 #> 39:  3.1808891 10.3534515     0.01      12     0 2021-12-18 15:36:10       39 #> 40: -4.4948067 14.4128072     0.01      13     0 2021-12-18 15:36:11       40 #> 41:  3.9983266  7.5078131     0.01      14     0 2021-12-18 15:36:11       41 #> 42: -3.4279246  8.1587219     0.01      15     0 2021-12-18 15:36:11       42 #> 43: -2.6419161  4.7178409     0.01      16     0 2021-12-18 15:36:11       43 #> 44: -4.4948067 14.4128072     0.02      13     1 2021-12-18 15:36:11       44 #> 45: -0.4282345 12.8523821     0.01      17     0 2021-12-18 15:36:11       45 #> 46: -3.3265699  1.4327677     0.01      18     0 2021-12-18 15:36:11       46 #> 47: -3.4279246  8.1587219     0.02      15     1 2021-12-18 15:36:11       47 #> 48:  4.5948266  1.7582454     0.01      19     0 2021-12-18 15:36:11       48 #> 49:  5.7549467  0.4248941     0.01      20     0 2021-12-18 15:36:11       49 #> 50:  4.5948266  1.7582454     0.02      19     1 2021-12-18 15:36:11       50 #> 51:  7.9415599  2.8148937     0.01      21     0 2021-12-18 15:36:11       51 #>             x1         x2 fidelity asha_id stage           timestamp batch_nr #>        status          y x_domain_x1 x_domain_x2 x_domain_fidelity #>  1: evaluated 348.894639   6.5881723  14.9833518              0.01 #>  2: evaluated  66.257315  -0.1385951  13.0583587              0.01 #>  3: evaluated  66.257053  -0.1385951  13.0583587              0.02 #>  4: evaluated  43.314138   8.0379920   1.0794223              0.01 #>  5: evaluated  42.553069   8.0379920   1.0794223              0.02 #>  6: evaluated  41.055977   8.0379920   1.0794223              0.04 #>  7: evaluated   7.711681  -2.0381866  10.7968492              0.01 #>  8: evaluated   7.699837  -2.0381866  10.7968492              0.02 #>  9: evaluated   7.676253  -2.0381866  10.7968492              0.04 #> 10: evaluated   7.629500  -2.0381866  10.7968492              0.08 #> 11: evaluated   6.378170   3.7297025   2.5736275              0.01 #> 12: evaluated   6.320224   3.7297025   2.5736275              0.02 #> 13: evaluated   6.205493   3.7297025   2.5736275              0.04 #> 14: evaluated   5.980675   3.7297025   2.5736275              0.08 #> 15: evaluated   5.549615   3.7297025   2.5736275              0.16 #> 16: evaluated   8.067697  -3.9958461  14.9329922              0.01 #> 17: evaluated   8.001164  -3.9958461  14.9329922              0.02 #> 18: evaluated   6.540126   2.8436635   4.1097451              0.01 #> 19: evaluated   6.501514   2.8436635   4.1097451              0.02 #> 20: evaluated   6.424683   2.8436635   4.1097451              0.04 #> 21: evaluated   6.272590   2.8436635   4.1097451              0.08 #> 22: evaluated  57.474655   5.0384610   5.4105540              0.01 #> 23: evaluated   7.081990  -4.3858724  13.1586824              0.01 #> 24: evaluated   7.097837  -4.3858724  13.1586824              0.02 #> 25: evaluated   7.131749  -4.3858724  13.1586824              0.04 #> 26: evaluated   4.007053   2.7873379   3.5341029              0.01 #> 27: evaluated   3.980142   2.7873379   3.5341029              0.02 #> 28: evaluated   3.926682   2.7873379   3.5341029              0.04 #> 29: evaluated   3.821211   2.7873379   3.5341029              0.08 #> 30: evaluated   3.616063   2.7873379   3.5341029              0.16 #> 31: evaluated   3.228947   2.7873379   3.5341029              0.32 #> 32: evaluated   3.512968  -2.3125947   9.8593007              0.01 #> 33: evaluated   3.512812  -2.3125947   9.8593007              0.02 #> 34: evaluated   3.512671  -2.3125947   9.8593007              0.04 #> 35: evaluated   3.513077  -2.3125947   9.8593007              0.08 #> 36: evaluated   3.516634  -2.3125947   9.8593007              0.16 #> 37: evaluated   3.534730  -2.3125947   9.8593007              0.32 #> 38: evaluated   2.547429   2.7873379   3.5341029              0.64 #> 39: evaluated  83.408062   3.1808891  10.3534515              0.01 #> 40: evaluated   8.348753  -4.4948067  14.4128072              0.01 #> 41: evaluated  58.305846   3.9983266   7.5078131              0.01 #> 42: evaluated  14.123574  -3.4279246   8.1587219              0.01 #> 43: evaluated  34.034267  -2.6419161   4.7178409              0.01 #> 44: evaluated   8.322926  -4.4948067  14.4128072              0.02 #> 45: evaluated  56.745850  -0.4282345  12.8523821              0.01 #> 46: evaluated 104.513107  -3.3265699   1.4327677              0.01 #> 47: evaluated  14.209532  -3.4279246   8.1587219              0.02 #> 48: evaluated  14.797478   4.5948266   1.7582454              0.01 #> 49: evaluated  24.972860   5.7549467   0.4248941              0.01 #> 50: evaluated  14.695154   4.5948266   1.7582454              0.02 #> 51:  proposed         NA          NA          NA                NA #>        status          y x_domain_x1 x_domain_x2 x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"OptimizerHyperband class implements hyperband optimization (HBX). HBX repeatedly calls SHA (OptimizerSuccessiveHalving) different numbers starting points. larger number starting points corresponds smaller budget allocated base stage. run SHA within HBX called bracket. HBX considers s_max + 1 brackets s_max = floor(log(r_max / r_min, eta). explorative bracket s = s_max constructs s_max + 1 stages allocates minimum budget (r_min) base stage. minimum budget increased bracket factor eta number starting points computed bracket approximately spends budget. Use hyperband_schedule() get preview bracket layout. s bracket number, stage number, n_i number configurations r_i budget allocated single configuration. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage explorative bracket, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Li L, Jamieson K, DeSalvo G, Rostamizadeh , Talwalkar (2018). “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research, 18(185), 1-52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"hyperband\") opt(\"hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta points promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn base stage bracket. default uniform sampling. repeats integer(1) 1 (default), optimization stopped stages evaluated. Otherwise, optimization stopped repeats runs SHA. bbotk::Terminator might stop optimization repeats executed.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"bbotk::Archive holds following additional columns specific hyperband algorithm: stage (integer(1)) stages bracket. Starts counting 0. bracket (integer(1)) bracket index. Counts 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"mlr3hyperband supports custom paradox::Sampler draw candidates base stage.","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":" $optimize() method supports progress bars via package progressr. Simply wrap method call progressr::with_progress() enable . Alternatively, call progressr::handlers() global = TRUE enable progress bars globally. recommend progress package backend can enabled progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"mlr3hyperband uses lgr package logging. lgr supports multiple log levels can queried getOption(\"lgr.log_levels\"). Use lgr::get_logger(\"bbotk\") access control logger. suppress output reduce verbosity, can lower log default level \"info\" \"warn\": log file data base, see documentation lgr::lgr-package.","code":"lgr::get_logger(\"bbotk\")$set_threshold(\"warn\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer -> OptimizerHyperband","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"bbotk::Optimizer$format() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"OptimizerHyperband$new() OptimizerHyperband$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"","code":"OptimizerHyperband$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"","code":"OptimizerHyperband$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_hyperband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Optimizer using the Hyperband algorithm — mlr_optimizers_hyperband","text":"","code":"library(bbotk) library(data.table)  # set search space search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # objective with modified branin function, see `bbotk::branin()` objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # initialize instance and optimizer instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 50) )  optimizer = opt(\"hyperband\")  # optimize branin function optimizer$optimize(instance) #>           x1       x2 fidelity  x_domain        y #> 1: -2.760003 10.58461 0.015625 <list[3]> 1.090317  # best scoring evaluation instance$result #>           x1       x2 fidelity  x_domain        y #> 1: -2.760003 10.58461 0.015625 <list[3]> 1.090317  # all evaluations as.data.table(instance$archive) #>              x1          x2 fidelity stage bracket repetition          y #>  1: -1.01490188 11.51084266 0.015625     0       6          1  29.996835 #>  2:  1.59842969  5.06897488 0.015625     0       6          1  12.089069 #>  3: -1.27463354 14.10342933 0.015625     0       6          1  49.101007 #>  4:  4.12608673  6.25806163 0.015625     0       6          1  44.395915 #>  5: -1.79458804 12.79022029 0.015625     0       6          1  22.576417 #>  6:  9.70442330  0.03518726 0.015625     0       6          1  44.128269 #>  7:  3.90728131 11.78303244 0.015625     0       6          1 136.070666 #>  8: -2.00302989 10.60740420 0.015625     0       6          1   7.657608 #>  9:  5.88129096  8.37605034 0.015625     0       6          1 132.747600 #> 10:  3.98077407 10.64135874 0.015625     0       6          1 113.619386 #> 11:  3.12084344 10.34357445 0.015625     0       6          1  81.599616 #> 12:  2.21490354  4.83128280 0.015625     0       6          1   9.098628 #> 13:  7.71289637  3.23970389 0.015625     0       6          1  70.425714 #> 14:  7.60018707  2.20133179 0.015625     0       6          1  54.939160 #> 15: -4.45756647 12.50570765 0.015625     0       6          1   9.018768 #> 16:  6.57772273  7.78708292 0.015625     0       6          1 138.556043 #> 17:  7.66299722  3.42293562 0.015625     0       6          1  72.872933 #> 18:  3.04458581  0.51485600 0.015625     0       6          1   1.297814 #> 19: -1.83243173  9.19753892 0.015625     0       6          1   7.547956 #> 20:  3.42053765 12.22047013 0.015625     0       6          1 128.564889 #> 21:  4.97449965 14.75407506 0.015625     0       6          1 265.628368 #> 22: -1.12035337  1.17664863 0.015625     0       6          1  58.337008 #> 23: -2.03055647 10.47191432 0.015625     0       6          1   6.978903 #> 24:  0.01217091  1.51204528 0.015625     0       6          1  39.569686 #> 25: -1.95764518 11.10370287 0.015625     0       6          1   9.874964 #> 26: -0.06031522  5.87929621 0.015625     0       6          1  19.631659 #> 27:  7.21070781 13.97155315 0.015625     0       6          1 334.349236 #> 28:  6.56772673  3.36934724 0.015625     0       6          1  61.413197 #> 29:  7.88239473  0.98288236 0.015625     0       6          1  41.286051 #> 30: -2.77618502 10.32856730 0.015625     0       6          1   1.138662 #> 31: -3.11998215 13.55162119 0.015625     0       6          1   5.629195 #> 32: -2.43708675  3.31246402 0.015625     0       6          1  48.231478 #> 33:  5.76377802  8.15782095 0.015625     0       6          1 124.625802 #> 34:  8.70766602  9.72015087 0.015625     0       6          1 235.248697 #> 35: -3.73630092 10.68396542 0.015625     0       6          1   4.908536 #> 36:  2.93892765 14.22258876 0.015625     0       6          1 160.224148 #> 37: -1.39700914  5.54175597 0.015625     0       6          1  19.177037 #> 38:  3.25763789 14.80587779 0.015625     0       6          1 187.174906 #> 39:  5.34852044 12.42674187 0.015625     0       6          1 213.377048 #> 40:  7.09788704  8.52915360 0.015625     0       6          1 167.306641 #> 41:  8.49356672  1.62511479 0.015625     0       6          1  52.223598 #> 42: -1.50070293  9.43479249 0.015625     0       6          1  11.627226 #> 43: -2.76000348 10.58461021 0.015625     0       6          1   1.090317 #> 44:  2.51159711  2.47975478 0.015625     0       6          1   2.321366 #> 45: -4.27128651  3.03921130 0.015625     0       6          1 112.396659 #> 46:  7.90269998  7.81358866 0.015625     0       6          1 165.055573 #> 47:  1.25115679  0.97605047 0.015625     0       6          1  22.508564 #> 48:  2.51763289 10.69131791 0.015625     0       6          1  74.514433 #> 49: -1.66866031 10.39000885 0.015625     0       6          1  11.779814 #> 50: -2.60906555  5.84668881 0.015625     0       6          1  22.113377 #> 51:  5.79093508  3.72523595 0.015625     0       6          1  53.398404 #> 52:  9.76411550  1.22058005 0.015625     0       6          1  62.243315 #> 53: -3.68116854  6.17736625 0.015625     0       6          1  38.948284 #> 54: -1.10194391 11.63246693 0.015625     0       6          1  29.094679 #> 55:  8.26874023  2.80832730 0.015625     0       6          1  68.007742 #> 56:  7.41137220  2.63515383 0.015625     0       6          1  59.564898 #> 57:  8.37146770  0.15880925 0.015625     0       6          1  33.633381 #> 58:  8.26050287  1.70693346 0.015625     0       6          1  51.845108 #> 59:  1.70319101  7.35129520 0.015625     0       6          1  24.515702 #> 60:  8.97786873  9.28003251 0.015625     0       6          1 229.063526 #> 61:  5.17254079 10.85682968 0.015625     0       6          1 164.732206 #> 62:  0.74217954  3.72324664 0.015625     0       6          1  18.314329 #> 63:  2.04240011  9.95049191 0.015625     0       6          1  55.662317 #> 64:  3.23435288  7.83826159 0.015625     0       6          1  44.851375 #>              x1          x2 fidelity stage bracket repetition          y #>               timestamp batch_nr    status x_domain_x1 x_domain_x2 #>  1: 2021-12-18 15:36:12        1 evaluated -1.01490188 11.51084266 #>  2: 2021-12-18 15:36:12        1 evaluated  1.59842969  5.06897488 #>  3: 2021-12-18 15:36:12        1 evaluated -1.27463354 14.10342933 #>  4: 2021-12-18 15:36:12        1 evaluated  4.12608673  6.25806163 #>  5: 2021-12-18 15:36:12        1 evaluated -1.79458804 12.79022029 #>  6: 2021-12-18 15:36:12        1 evaluated  9.70442330  0.03518726 #>  7: 2021-12-18 15:36:12        1 evaluated  3.90728131 11.78303244 #>  8: 2021-12-18 15:36:12        1 evaluated -2.00302989 10.60740420 #>  9: 2021-12-18 15:36:12        1 evaluated  5.88129096  8.37605034 #> 10: 2021-12-18 15:36:12        1 evaluated  3.98077407 10.64135874 #> 11: 2021-12-18 15:36:12        1 evaluated  3.12084344 10.34357445 #> 12: 2021-12-18 15:36:12        1 evaluated  2.21490354  4.83128280 #> 13: 2021-12-18 15:36:12        1 evaluated  7.71289637  3.23970389 #> 14: 2021-12-18 15:36:12        1 evaluated  7.60018707  2.20133179 #> 15: 2021-12-18 15:36:12        1 evaluated -4.45756647 12.50570765 #> 16: 2021-12-18 15:36:12        1 evaluated  6.57772273  7.78708292 #> 17: 2021-12-18 15:36:12        1 evaluated  7.66299722  3.42293562 #> 18: 2021-12-18 15:36:12        1 evaluated  3.04458581  0.51485600 #> 19: 2021-12-18 15:36:12        1 evaluated -1.83243173  9.19753892 #> 20: 2021-12-18 15:36:12        1 evaluated  3.42053765 12.22047013 #> 21: 2021-12-18 15:36:12        1 evaluated  4.97449965 14.75407506 #> 22: 2021-12-18 15:36:12        1 evaluated -1.12035337  1.17664863 #> 23: 2021-12-18 15:36:12        1 evaluated -2.03055647 10.47191432 #> 24: 2021-12-18 15:36:12        1 evaluated  0.01217091  1.51204528 #> 25: 2021-12-18 15:36:12        1 evaluated -1.95764518 11.10370287 #> 26: 2021-12-18 15:36:12        1 evaluated -0.06031522  5.87929621 #> 27: 2021-12-18 15:36:12        1 evaluated  7.21070781 13.97155315 #> 28: 2021-12-18 15:36:12        1 evaluated  6.56772673  3.36934724 #> 29: 2021-12-18 15:36:12        1 evaluated  7.88239473  0.98288236 #> 30: 2021-12-18 15:36:12        1 evaluated -2.77618502 10.32856730 #> 31: 2021-12-18 15:36:12        1 evaluated -3.11998215 13.55162119 #> 32: 2021-12-18 15:36:12        1 evaluated -2.43708675  3.31246402 #> 33: 2021-12-18 15:36:12        1 evaluated  5.76377802  8.15782095 #> 34: 2021-12-18 15:36:12        1 evaluated  8.70766602  9.72015087 #> 35: 2021-12-18 15:36:12        1 evaluated -3.73630092 10.68396542 #> 36: 2021-12-18 15:36:12        1 evaluated  2.93892765 14.22258876 #> 37: 2021-12-18 15:36:12        1 evaluated -1.39700914  5.54175597 #> 38: 2021-12-18 15:36:12        1 evaluated  3.25763789 14.80587779 #> 39: 2021-12-18 15:36:12        1 evaluated  5.34852044 12.42674187 #> 40: 2021-12-18 15:36:12        1 evaluated  7.09788704  8.52915360 #> 41: 2021-12-18 15:36:12        1 evaluated  8.49356672  1.62511479 #> 42: 2021-12-18 15:36:12        1 evaluated -1.50070293  9.43479249 #> 43: 2021-12-18 15:36:12        1 evaluated -2.76000348 10.58461021 #> 44: 2021-12-18 15:36:12        1 evaluated  2.51159711  2.47975478 #> 45: 2021-12-18 15:36:12        1 evaluated -4.27128651  3.03921130 #> 46: 2021-12-18 15:36:12        1 evaluated  7.90269998  7.81358866 #> 47: 2021-12-18 15:36:12        1 evaluated  1.25115679  0.97605047 #> 48: 2021-12-18 15:36:12        1 evaluated  2.51763289 10.69131791 #> 49: 2021-12-18 15:36:12        1 evaluated -1.66866031 10.39000885 #> 50: 2021-12-18 15:36:12        1 evaluated -2.60906555  5.84668881 #> 51: 2021-12-18 15:36:12        1 evaluated  5.79093508  3.72523595 #> 52: 2021-12-18 15:36:12        1 evaluated  9.76411550  1.22058005 #> 53: 2021-12-18 15:36:12        1 evaluated -3.68116854  6.17736625 #> 54: 2021-12-18 15:36:12        1 evaluated -1.10194391 11.63246693 #> 55: 2021-12-18 15:36:12        1 evaluated  8.26874023  2.80832730 #> 56: 2021-12-18 15:36:12        1 evaluated  7.41137220  2.63515383 #> 57: 2021-12-18 15:36:12        1 evaluated  8.37146770  0.15880925 #> 58: 2021-12-18 15:36:12        1 evaluated  8.26050287  1.70693346 #> 59: 2021-12-18 15:36:12        1 evaluated  1.70319101  7.35129520 #> 60: 2021-12-18 15:36:12        1 evaluated  8.97786873  9.28003251 #> 61: 2021-12-18 15:36:12        1 evaluated  5.17254079 10.85682968 #> 62: 2021-12-18 15:36:12        1 evaluated  0.74217954  3.72324664 #> 63: 2021-12-18 15:36:12        1 evaluated  2.04240011  9.95049191 #> 64: 2021-12-18 15:36:12        1 evaluated  3.23435288  7.83826159 #>               timestamp batch_nr    status x_domain_x1 x_domain_x2 #>     x_domain_fidelity #>  1:          0.015625 #>  2:          0.015625 #>  3:          0.015625 #>  4:          0.015625 #>  5:          0.015625 #>  6:          0.015625 #>  7:          0.015625 #>  8:          0.015625 #>  9:          0.015625 #> 10:          0.015625 #> 11:          0.015625 #> 12:          0.015625 #> 13:          0.015625 #> 14:          0.015625 #> 15:          0.015625 #> 16:          0.015625 #> 17:          0.015625 #> 18:          0.015625 #> 19:          0.015625 #> 20:          0.015625 #> 21:          0.015625 #> 22:          0.015625 #> 23:          0.015625 #> 24:          0.015625 #> 25:          0.015625 #> 26:          0.015625 #> 27:          0.015625 #> 28:          0.015625 #> 29:          0.015625 #> 30:          0.015625 #> 31:          0.015625 #> 32:          0.015625 #> 33:          0.015625 #> 34:          0.015625 #> 35:          0.015625 #> 36:          0.015625 #> 37:          0.015625 #> 38:          0.015625 #> 39:          0.015625 #> 40:          0.015625 #> 41:          0.015625 #> 42:          0.015625 #> 43:          0.015625 #> 44:          0.015625 #> 45:          0.015625 #> 46:          0.015625 #> 47:          0.015625 #> 48:          0.015625 #> 49:          0.015625 #> 50:          0.015625 #> 51:          0.015625 #> 52:          0.015625 #> 53:          0.015625 #> 54:          0.015625 #> 55:          0.015625 #> 56:          0.015625 #> 57:          0.015625 #> 58:          0.015625 #> 59:          0.015625 #> 60:          0.015625 #> 61:          0.015625 #> 62:          0.015625 #> 63:          0.015625 #> 64:          0.015625 #>     x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"OptimizerSuccessiveHalving class implements successive halving algorithm (SHA). SHA randomly samples n candidate points allocates minimum budget (r_min) candidates. candidates raced stages single best candidate repeatedly increasing budget factor eta promoting best 1 / eta  fraction next stage. means promising points allocated higher budget overall lower performing ones discarded early . budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage, set lower bound budget parameter. upper bound  defines maximum budget (r_max) allocated candidates last stage. number stages computed candidate base stage allocated minimum budget candidates last stage evaluated maximum budget. following table stage layout eta = 2, r_min = 1 r_max = 8. stage number, n_i number configurations r_i budget allocated single configuration.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Jamieson K, Talwalkar (2016). “Non-stochastic Best Arm Identification Hyperparameter Optimization.” Gretton , Robert CC (eds.), Proceedings 19th International Conference Artificial Intelligence Statistics, volume 51 series Proceedings Machine Learning Research, 240-248. http://proceedings.mlr.press/v51/jamieson16.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"n integer(1) Number points base stage. eta numeric(1) every stage, budget increased factor eta best 1 / eta points promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling. repetitions integer(1) 1 (default), optimization stopped stages evaluated. Otherwise, optimization stopped repetitions runs SHA. bbotk::Terminator might stop optimization repetition executed.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Archive holds following additional columns specific successive halving algorithm: stage (integer(1)) Stage index. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"mlr3hyperband supports custom paradox::Sampler draw candidates base stage.","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":" $optimize() method supports progress bars via package progressr. Simply wrap method call progressr::with_progress() enable . Alternatively, call progressr::handlers() global = TRUE enable progress bars globally. recommend progress package backend can enabled progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"mlr3hyperband uses lgr package logging. lgr supports multiple log levels can queried getOption(\"lgr.log_levels\"). Use lgr::get_logger(\"bbotk\") access control logger. suppress output reduce verbosity, can lower log default level \"info\" \"warn\": log file data base, see documentation lgr::lgr-package.","code":"lgr::get_logger(\"bbotk\")$set_threshold(\"warn\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer -> OptimizerSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"bbotk::Optimizer$format() bbotk::Optimizer$optimize() bbotk::Optimizer$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"OptimizerSuccessiveHalving$new() OptimizerSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"OptimizerSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"OptimizerSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_optimizers_successive_halving.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperparameter Optimization with Successive Halving — mlr_optimizers_successive_halving","text":"","code":"library(bbotk) library(data.table)  # set search space search_space = domain = ps(   x1 = p_dbl(-5, 10),   x2 = p_dbl(0, 15),   fidelity = p_dbl(1e-2, 1, tags = \"budget\") )  # objective with modified branin function, see `bbotk::branin()` objective = ObjectiveRFun$new(   fun = branin,   domain = domain,   codomain = ps(y = p_dbl(tags = \"minimize\")) )  # initialize instance and optimizer instance = OptimInstanceSingleCrit$new(   objective = objective,   search_space = search_space,   terminator = trm(\"evals\", n_evals = 50) )  optimizer = opt(\"successive_halving\")  # optimize branin function optimizer$optimize(instance) #>          x1        x2 fidelity  x_domain        y #> 1: 3.476248 0.4572515     0.01 <list[3]> 1.071118  # best scoring evaluation instance$result #>          x1        x2 fidelity  x_domain        y #> 1: 3.476248 0.4572515     0.01 <list[3]> 1.071118  # all evaluations as.data.table(instance$archive) #>             x1         x2 fidelity stage repetition          y #>  1:  6.8678595 11.7047668     0.01     0          1 249.399198 #>  2: -1.9828871  5.2720126     0.01     0          1  22.174359 #>  3:  2.9731796 10.7259117     0.01     0          1  85.009122 #>  4:  1.1637983  9.7655518     0.01     0          1  44.902981 #>  5:  7.4980280 10.8071700     0.01     0          1 239.658083 #>  6:  8.4147781  3.1023669     0.01     0          1  74.742200 #>  7: -4.5217634 10.1717910     0.01     0          1  21.444688 #>  8:  7.4039834 10.5438094     0.01     0          1 229.471484 #>  9:  0.6326525 12.7760873     0.01     0          1  78.130684 #> 10:  1.8670439  2.3904609     0.01     0          1   7.749267 #> 11:  3.4762481  0.4572515     0.01     0          1   1.071118 #> 12:  9.3665572  8.0117499     0.01     0          1 204.073582 #> 13:  0.7594655 10.7282417     0.01     0          1  52.004665 #> 14:  4.1652995 10.2745488     0.01     0          1 112.752171 #> 15:  2.3183999  9.9333705     0.01     0          1  59.137869 #> 16: -4.0063353  3.8474405     0.01     0          1  85.009801 #> 17:  3.4762481  0.4572515     0.02     1          1   1.080325 #> 18:  1.8670439  2.3904609     0.02     1          1   7.754461 #> 19: -4.5217634 10.1717910     0.02     1          1  21.594037 #> 20: -1.9828871  5.2720126     0.02     1          1  22.205849 #> 21:  1.1637983  9.7655518     0.02     1          1  44.887876 #> 22:  0.7594655 10.7282417     0.02     1          1  51.997837 #> 23:  2.3183999  9.9333705     0.02     1          1  59.057692 #> 24:  8.4147781  3.1023669     0.02     1          1  73.563638 #> 25:  3.4762481  0.4572515     0.04     2          1   1.099614 #> 26:  1.8670439  2.3904609     0.04     2          1   7.764921 #> 27: -4.5217634 10.1717910     0.04     2          1  21.895242 #> 28: -1.9828871  5.2720126     0.04     2          1  22.268922 #> 29:  3.4762481  0.4572515     0.08     3          1   1.141697 #> 30:  1.8670439  2.3904609     0.08     3          1   7.786135 #> 31:  3.4762481  0.4572515     0.16     4          1   1.239883 #>             x1         x2 fidelity stage repetition          y #>               timestamp batch_nr    status x_domain_x1 x_domain_x2 #>  1: 2021-12-18 15:36:13        1 evaluated   6.8678595  11.7047668 #>  2: 2021-12-18 15:36:13        1 evaluated  -1.9828871   5.2720126 #>  3: 2021-12-18 15:36:13        1 evaluated   2.9731796  10.7259117 #>  4: 2021-12-18 15:36:13        1 evaluated   1.1637983   9.7655518 #>  5: 2021-12-18 15:36:13        1 evaluated   7.4980280  10.8071700 #>  6: 2021-12-18 15:36:13        1 evaluated   8.4147781   3.1023669 #>  7: 2021-12-18 15:36:13        1 evaluated  -4.5217634  10.1717910 #>  8: 2021-12-18 15:36:13        1 evaluated   7.4039834  10.5438094 #>  9: 2021-12-18 15:36:13        1 evaluated   0.6326525  12.7760873 #> 10: 2021-12-18 15:36:13        1 evaluated   1.8670439   2.3904609 #> 11: 2021-12-18 15:36:13        1 evaluated   3.4762481   0.4572515 #> 12: 2021-12-18 15:36:13        1 evaluated   9.3665572   8.0117499 #> 13: 2021-12-18 15:36:13        1 evaluated   0.7594655  10.7282417 #> 14: 2021-12-18 15:36:13        1 evaluated   4.1652995  10.2745488 #> 15: 2021-12-18 15:36:13        1 evaluated   2.3183999   9.9333705 #> 16: 2021-12-18 15:36:13        1 evaluated  -4.0063353   3.8474405 #> 17: 2021-12-18 15:36:13        2 evaluated   3.4762481   0.4572515 #> 18: 2021-12-18 15:36:13        2 evaluated   1.8670439   2.3904609 #> 19: 2021-12-18 15:36:13        2 evaluated  -4.5217634  10.1717910 #> 20: 2021-12-18 15:36:13        2 evaluated  -1.9828871   5.2720126 #> 21: 2021-12-18 15:36:13        2 evaluated   1.1637983   9.7655518 #> 22: 2021-12-18 15:36:13        2 evaluated   0.7594655  10.7282417 #> 23: 2021-12-18 15:36:13        2 evaluated   2.3183999   9.9333705 #> 24: 2021-12-18 15:36:13        2 evaluated   8.4147781   3.1023669 #> 25: 2021-12-18 15:36:13        3 evaluated   3.4762481   0.4572515 #> 26: 2021-12-18 15:36:13        3 evaluated   1.8670439   2.3904609 #> 27: 2021-12-18 15:36:13        3 evaluated  -4.5217634  10.1717910 #> 28: 2021-12-18 15:36:13        3 evaluated  -1.9828871   5.2720126 #> 29: 2021-12-18 15:36:13        4 evaluated   3.4762481   0.4572515 #> 30: 2021-12-18 15:36:13        4 evaluated   1.8670439   2.3904609 #> 31: 2021-12-18 15:36:13        5 evaluated   3.4762481   0.4572515 #>               timestamp batch_nr    status x_domain_x1 x_domain_x2 #>     x_domain_fidelity #>  1:              0.01 #>  2:              0.01 #>  3:              0.01 #>  4:              0.01 #>  5:              0.01 #>  6:              0.01 #>  7:              0.01 #>  8:              0.01 #>  9:              0.01 #> 10:              0.01 #> 11:              0.01 #> 12:              0.01 #> 13:              0.01 #> 14:              0.01 #> 15:              0.01 #> 16:              0.01 #> 17:              0.02 #> 18:              0.02 #> 19:              0.02 #> 20:              0.02 #> 21:              0.02 #> 22:              0.02 #> 23:              0.02 #> 24:              0.02 #> 25:              0.04 #> 26:              0.04 #> 27:              0.04 #> 28:              0.04 #> 29:              0.08 #> 30:              0.08 #> 31:              0.16 #>     x_domain_fidelity"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"TunerAhb class implements asynchronous hyperband algorithm (AHB). AHB repeatedly runs ASHA (TunerAsha) different minimum budgets base stage. run ASHA within AHB called bracket. AHB considers s_max + 1 brackets s_max = floor(log(r_max / r_min, eta). explorative bracket s = s_max constructs s_max + 1 stages allocates minimum budget (r_min) base stage.  minimum budget (r_min) increased bracket factor eta maximum budget allocated base stage. bracket s = 0 random search full budget. ASHA run uses 1 / s_max + 1 bbotk::Terminator. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage explorative bracket, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta candidates promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn base stage bracket. default uniform sampling.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"mlr3tuning::ArchiveTuning holds following additional columns specific hyperband algorithm: bracket (integer(1)) bracket index. Counts 0. stage (integer(1)) stages bracket. Starts counting 0.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"mlr3hyperband supports custom paradox::Sampler draw candidates base stage.","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":" $optimize() method supports progress bars via package progressr. Simply wrap method call progressr::with_progress() enable . Alternatively, call progressr::handlers() global = TRUE enable progress bars globally. recommend progress package backend can enabled progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"hyperparameter configurations asynchronously evaluated future package. resampling candidate send available worker. select parallel backend, use future::plan().","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"mlr3hyperband uses lgr package logging. lgr supports multiple log levels can queried getOption(\"lgr.log_levels\"). Use lgr::get_logger(\"bbotk\") access control logger. suppress output reduce verbosity, can lower log default level \"info\" \"warn\": log file data base, see documentation lgr::lgr-package.","code":"lgr::get_logger(\"bbotk\")$set_threshold(\"warn\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"mlr3tuning::Tuner -> mlr3tuning::TunerFromOptimizer -> TunerAhb","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"TunerAhb$new() TunerAhb$optimize() TunerAhb$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"","code":"TunerAhb$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"Performs tuning TuningInstanceSingleCrit / TuningInstanceMultiCrit termination. single evaluations final results written ArchiveTuning resides TuningInstanceSingleCrit/TuningInstanceMultiCrit. final result returned.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"","code":"TunerAhb$optimize(inst)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"inst (TuningInstanceSingleCrit | TuningInstanceMultiCrit).","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"data.table::data.table.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"","code":"TunerAhb$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_ahb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuner Asynchronous Hyperband — mlr_tuners_ahb","text":"","code":"if(requireNamespace(\"xgboost\")) {   library(mlr3learners)    # define hyperparameter and budget parameter   search_space = ps(     nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),     eta = p_dbl(lower = 0, upper = 1),     booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\"))   )    # \\donttest{   # hyperparameter tuning on the pima indians diabetes data set   instance = tune(     method = \"ahb\",     task = tsk(\"pima\"),     learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),     resampling = rsmp(\"cv\", folds = 3),     measures = msr(\"classif.ce\"),     search_space = search_space,     term_evals = 100   )    # best performing hyperparameter configuration   instance$result   # } } #> Loading required namespace: xgboost #>    nrounds      eta booster learner_param_vals  x_domain classif.ce #> 1:       4 0.449349    dart          <list[6]> <list[3]>  0.2369792"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"TunerAsha class implements asynchronous successive halving algorithm (ASHA). ASHA parallelizes SHA (TunerSuccessiveHalving) promoting candidates next stage soon possible instead waiting candidates stage finish. ASHA starts sampling candidate hyperparameter configuration available worker. evaluation finishes worker available , ASHA checks stages top bottom promotable candidates. Promotions possible evaluated candidates belong top 1 / eta stage. promotions possible, new candidate sampled added base stage, increases number possible promotions stages. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stage.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta candidates promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"bbotk::Archive holds following additional column specific successive halving algorithm: stage (integer(1)) Stage index. Starts counting 0.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"mlr3hyperband supports custom paradox::Sampler draw candidates base stage.","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":" $optimize() method supports progress bars via package progressr. Simply wrap method call progressr::with_progress() enable . Alternatively, call progressr::handlers() global = TRUE enable progress bars globally. recommend progress package backend can enabled progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"hyperparameter configurations asynchronously evaluated future package. resampling candidate send available worker. select parallel backend, use future::plan().","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"mlr3hyperband uses lgr package logging. lgr supports multiple log levels can queried getOption(\"lgr.log_levels\"). Use lgr::get_logger(\"bbotk\") access control logger. suppress output reduce verbosity, can lower log default level \"info\" \"warn\": log file data base, see documentation lgr::lgr-package.","code":"lgr::get_logger(\"bbotk\")$set_threshold(\"warn\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"mlr3tuning::Tuner -> mlr3tuning::TunerFromOptimizer -> TunerAsha","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$print()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"TunerAsha$new() TunerAsha$optimize() TunerAsha$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"","code":"TunerAsha$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"Performs tuning TuningInstanceSingleCrit / TuningInstanceMultiCrit termination. single evaluations final results written ArchiveTuning resides TuningInstanceSingleCrit/TuningInstanceMultiCrit. final result returned.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"","code":"TunerAsha$optimize(inst)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"inst (TuningInstanceSingleCrit | TuningInstanceMultiCrit).","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"data.table::data.table.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"","code":"TunerAsha$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_asha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuner Asynchronous Successive Halving — mlr_tuners_asha","text":"","code":"if(requireNamespace(\"xgboost\")) {   library(mlr3learners)    # define hyperparameter and budget parameter   search_space = ps(     nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),     eta = p_dbl(lower = 0, upper = 1),     booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\"))   )    # \\donttest{   # hyperparameter tuning on the pima indians diabetes data set   instance = tune(     method = \"asha\",     task = tsk(\"pima\"),     learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),     resampling = rsmp(\"cv\", folds = 3),     measures = msr(\"classif.ce\"),     search_space = search_space,     term_evals = 100   )    # best performing hyperparameter configuration   instance$result   # } } #>    nrounds       eta booster learner_param_vals  x_domain classif.ce #> 1:       8 0.2669924  gbtree          <list[6]> <list[3]>  0.2356771"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":null,"dir":"Reference","previous_headings":"","what":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"TunerHyperband class implements hyperband tuning (HBX). HBX repeatedly calls SHA (TunerSuccessiveHalving) different numbers starting configurations. larger number starting configurations corresponds smaller budget allocated base stage. run SHA within HBX called bracket. HBX considers s_max + 1 brackets s_max = floor(log(r_max / r_min, eta). explorative bracket s = s_max constructs s_max + 1 stages allocates minimum budget (r_min) base stage. minimum budget increased bracket factor eta number starting configurations computed bracket approximately spends budget.Use hyperband_schedule() get preview bracket layout. s bracket number, stage number, n_i number configurations r_i budget allocated single configuration. budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage explorative bracket, set lower bound budget parameter. upper bound defines maximum budget (r_max) allocated candidates last stages.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Li L, Jamieson K, DeSalvo G, Rostamizadeh , Talwalkar (2018). “Hyperband: Novel Bandit-Based Approach Hyperparameter Optimization.” Journal Machine Learning Research, 18(185), 1-52. https://jmlr.org/papers/v18/16-558.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"dictionary","dir":"Reference","previous_headings":"","what":"Dictionary","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Optimizer can instantiated via dictionary mlr_optimizers associated sugar function opt():","code":"mlr_optimizers$get(\"hyperband\") opt(\"hyperband\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"eta numeric(1) every stage, budget increased factor eta best 1 / eta candidates promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn base stage bracket. default uniform sampling.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3tuning::ArchiveTuning holds following additional columns specific hyperband algorithm: stage (integer(1)) stages bracket. Starts counting 0. bracket (integer(1)) bracket index. Counts 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3hyperband supports custom paradox::Sampler draw candidates base stage.","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":" $optimize() method supports progress bars via package progressr. Simply wrap method call progressr::with_progress() enable . Alternatively, call progressr::handlers() global = TRUE enable progress bars globally. recommend progress package backend can enabled progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"HBX parallelizes original hyperband algorithm evaluating hyperparameter configurations equal budget across brackets one batch. example, configurations stage 1 bracket 3 stage 0 bracket 2 one batch. select parallel backend, use future::plan().","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3hyperband uses lgr package logging. lgr supports multiple log levels can queried getOption(\"lgr.log_levels\"). Use lgr::get_logger(\"bbotk\") access control logger. suppress output reduce verbosity, can lower log default level \"info\" \"warn\": log file data base, see documentation lgr::lgr-package.","code":"lgr::get_logger(\"bbotk\")$set_threshold(\"warn\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner -> mlr3tuning::TunerFromOptimizer -> TunerHyperband","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$print() mlr3tuning::TunerFromOptimizer$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"TunerHyperband$new() TunerHyperband$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"","code":"TunerHyperband$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"","code":"TunerHyperband$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_hyperband.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tuner using the Hyperband algorithm — mlr_tuners_hyperband","text":"","code":"if(requireNamespace(\"xgboost\")) {   library(mlr3learners)    # define hyperparameter and budget parameter   search_space = ps(     nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),     eta = p_dbl(lower = 0, upper = 1),     booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\"))   )    # \\donttest{   # hyperparameter tuning on the pima indians diabetes data set   instance = tune(     method = \"hyperband\",     task = tsk(\"pima\"),     learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),     resampling = rsmp(\"cv\", folds = 3),     measures = msr(\"classif.ce\"),     search_space = search_space,     term_evals = 100   )    # best performing hyperparameter configuration   instance$result   # } } #>    nrounds       eta booster learner_param_vals  x_domain classif.ce #> 1:       2 0.8628339    dart          <list[6]> <list[3]>  0.2408854"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":null,"dir":"Reference","previous_headings":"","what":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"TunerSuccessiveHalving class implements successive halving algorithm (SHA). SHA randomly samples n candidate hyperparameter configurations allocates minimum budget (r_min) candidates. candidates raced stages single best candidate repeatedly increasing budget factor eta promoting best 1 / eta  fraction next stage. means promising hyperparameter configurations allocated higher budget overall lower performing ones discarded early . budget hyperparameter must tagged \"budget\" search space. minimum budget (r_min) allocated base stage, set lower bound budget parameter. upper bound  defines maximum budget (r_max) allocated candidates last stage. number stages computed candidate base stage allocated minimum budget candidates last stage evaluated maximum budget. following table stage layout eta = 2, r_min = 1 r_max = 8. stage number, n_i number configurations r_i budget allocated single configuration.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Jamieson K, Talwalkar (2016). “Non-stochastic Best Arm Identification Hyperparameter Optimization.” Gretton , Robert CC (eds.), Proceedings 19th International Conference Artificial Intelligence Statistics, volume 51 series Proceedings Machine Learning Research, 240-248. http://proceedings.mlr.press/v51/jamieson16.html.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"n integer(1) Number candidates base stage. eta numeric(1) every stage, budget increased factor eta best 1 / eta candidates promoted next stage. Non-integer values supported, eta allowed less equal 1. sampler paradox::Sampler Object defining samples parameter space drawn. default uniform sampling. repeats logical(1) FALSE (default), SHA terminates stages evaluated. Otherwise, SHA starts last stage evaluated.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"archive","dir":"Reference","previous_headings":"","what":"Archive","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::ArchiveTuning holds following additional columns specific successive halving algorithm: stage (integer(1)) Stage index. Starts counting 0. repetition (integer(1)) Repetition index. Start counting 1.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"custom-sampler","dir":"Reference","previous_headings":"","what":"Custom Sampler","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3hyperband supports custom paradox::Sampler draw candidates base stage.","code":"# - beta distribution with alpha = 2 and beta = 5 # - categorical distribution with custom probabilities sampler = SamplerJointIndep$new(list(   Sampler1DRfun$new(params[[2]], function(n) rbeta(n, 2, 5)),   Sampler1DCateg$new(params[[3]], prob = c(0.2, 0.3, 0.5)) ))"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"progress-bars","dir":"Reference","previous_headings":"","what":"Progress Bars","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":" $optimize() method supports progress bars via package progressr. Simply wrap method call progressr::with_progress() enable . Alternatively, call progressr::handlers() global = TRUE enable progress bars globally. recommend progress package backend can enabled progressr::handlers(\"progress\").","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"parallelization","dir":"Reference","previous_headings":"","what":"Parallelization","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"hyperparameter configurations one stage evaluated parallel future package. select parallel backend, use future::plan().","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"logging","dir":"Reference","previous_headings":"","what":"Logging","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3hyperband uses lgr package logging. lgr supports multiple log levels can queried getOption(\"lgr.log_levels\"). Use lgr::get_logger(\"bbotk\") access control logger. suppress output reduce verbosity, can lower log default level \"info\" \"warn\": log file data base, see documentation lgr::lgr-package.","code":"lgr::get_logger(\"bbotk\")$set_threshold(\"warn\")"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner -> mlr3tuning::TunerFromOptimizer -> TunerSuccessiveHalving","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"mlr3tuning::Tuner$format() mlr3tuning::Tuner$print() mlr3tuning::TunerFromOptimizer$optimize()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"TunerSuccessiveHalving$new() TunerSuccessiveHalving$clone()","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"Creates new instance R6 class.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"TunerSuccessiveHalving$new()"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"objects class cloneable method.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"TunerSuccessiveHalving$clone(deep = FALSE)"},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"deep Whether make deep clone.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/reference/mlr_tuners_successive_halving.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hyperparameter Tuning with Successive Halving — mlr_tuners_successive_halving","text":"","code":"if(requireNamespace(\"xgboost\")) {   library(mlr3learners)    # define hyperparameter and budget parameter   search_space = ps(     nrounds = p_int(lower = 1, upper = 16, tags = \"budget\"),     eta = p_dbl(lower = 0, upper = 1),     booster = p_fct(levels = c(\"gbtree\", \"gblinear\", \"dart\"))   )    # \\donttest{   # hyperparameter tuning on the pima indians diabetes data set   instance = tune(     method = \"successive_halving\",     task = tsk(\"pima\"),     learner = lrn(\"classif.xgboost\", eval_metric = \"logloss\"),     resampling = rsmp(\"cv\", folds = 3),     measures = msr(\"classif.ce\"),     search_space = search_space,     term_evals = 100   )    # best performing hyperparameter configuration   instance$result   # } } #>    nrounds       eta booster learner_param_vals  x_domain classif.ce #> 1:       8 0.3646199    dart          <list[6]> <list[3]>  0.2447917"},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-0209000","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.2.0.9000","title":"mlr3hyperband 0.2.0.9000","text":"Implements parallel evaluation stages. Allows start last stage evaluated.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-020","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.2.0","title":"mlr3hyperband 0.2.0","text":"CRAN release: 2021-09-13 Adds OptimizerHyperband. Adds OptimizerSuccessiveHalving.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-012","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.2","title":"mlr3hyperband 0.1.2","text":"CRAN release: 2021-01-29 Internal changes .","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-011","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.1","title":"mlr3hyperband 0.1.1","text":"CRAN release: 2020-12-07 Fixed dependency emoa.","code":""},{"path":"https://mlr3hyperband.mlr-org.com/dev/news/index.html","id":"mlr3hyperband-010","dir":"Changelog","previous_headings":"","what":"mlr3hyperband 0.1.0","title":"mlr3hyperband 0.1.0","text":"CRAN release: 2020-10-26 Initial CRAN release.","code":""}]
